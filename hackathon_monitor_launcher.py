#!/usr/bin/env python3
"""
Hackathon Monitor - Universal Launcher
Choose your preferred interface: Web, GUI, Terminal, or CLI
"""

import sys
import subprocess
import platform
from pathlib import Path

def check_dependencies():
    """Check which interfaces are available"""
    available = {
        'web': False,
        'gui': False,
        'tui': False,
        'cli': True  # CLI is always available
    }
    
    # Check Flask for web interface
    try:
        import flask
        available['web'] = True
    except ImportError:
        pass
    
    # Check tkinter for GUI
    try:
        import tkinter
        available['gui'] = True
    except ImportError:
        pass
    
    # Check Rich for TUI
    try:
        import rich
        available['tui'] = True
    except ImportError:
        pass
    
    return available

def show_interface_menu():
    """Show interface selection menu"""
    available = check_dependencies()
    
    print("üéØ Hackathon Monitor - Interface Launcher")
    print("=" * 45)
    print(f"Platform: {platform.system()} {platform.release()}")
    print(f"Python: {platform.python_version()}")
    print()
    
    print("Available Interfaces:")
    print()
    
    options = []
    
    if available['web']:
        print("1. üåê Web Interface (Recommended)")
        print("   ‚Ä¢ Modern web dashboard")
        print("   ‚Ä¢ Works on any device")
        print("   ‚Ä¢ Real-time updates")
        print("   ‚Ä¢ Mobile-friendly")
        options.append(('web', 'hackathon_monitor_web.py'))
        print()
    
    if available['gui']:
        print(f"{len(options) + 1}. üñ•Ô∏è Desktop GUI")
        print("   ‚Ä¢ Traditional desktop application")
        print("   ‚Ä¢ Native look and feel")
        print("   ‚Ä¢ Easy to use")
        options.append(('gui', 'hackathon_monitor_gui_crossplatform.py'))
        print()
    
    if available['tui']:
        print(f"{len(options) + 1}. üìü Terminal Interface")
        print("   ‚Ä¢ Modern terminal UI")
        print("   ‚Ä¢ Rich text and colors")
        print("   ‚Ä¢ Keyboard navigation")
        options.append(('tui', 'hackathon_monitor_tui.py'))
        print()
    
    print(f"{len(options) + 1}. ‚å®Ô∏è Command Line")
    print("   ‚Ä¢ Scriptable interface")
    print("   ‚Ä¢ Perfect for automation")
    print("   ‚Ä¢ JSON output support")
    options.append(('cli', 'hackathon_monitor_cli.py'))
    print()
    
    print(f"{len(options) + 1}. üì¶ Install Missing Dependencies")
    print(f"{len(options) + 2}. ‚ùì Help")
    print(f"{len(options) + 3}. üö™ Exit")
    print()
    
    return options

def install_dependencies():
    """Install missing dependencies"""
    print("üì¶ Installing Dependencies...")
    print("=" * 30)
    
    dependencies = {
        'Web Interface': 'flask',
        'Terminal Interface': 'rich',
        'All platforms': 'requests beautifulsoup4 openpyxl selenium schedule'
    }
    
    print("This will install:")
    for name, deps in dependencies.items():
        print(f"  ‚Ä¢ {name}: {deps}")
    print()
    
    confirm = input("Continue? (y/N): ").strip().lower()
    if confirm != 'y':
        return
    
    try:
        # Install all dependencies
        cmd = [sys.executable, "-m", "pip", "install", "-r", "requirements_crossplatform.txt", "--upgrade"]
        print("Running:", " ".join(cmd))
        subprocess.check_call(cmd)
        print("‚úÖ Dependencies installed successfully!")
    except subprocess.CalledProcessError:
        print("‚ùå Installation failed. Try running manually:")
        print("pip install -r requirements_crossplatform.txt")
    
    input("\nPress Enter to continue...")

def show_help():
    """Show help information"""
    print("‚ùì Hackathon Monitor Help")
    print("=" * 25)
    print()
    
    print("üåê Web Interface:")
    print("  ‚Ä¢ Best for most users")
    print("  ‚Ä¢ Access from any device on your network")
    print("  ‚Ä¢ Modern, responsive design")
    print("  ‚Ä¢ Real-time monitoring dashboard")
    print()
    
    print("üñ•Ô∏è Desktop GUI:")
    print("  ‚Ä¢ Traditional desktop application")
    print("  ‚Ä¢ Native operating system integration")
    print("  ‚Ä¢ Familiar interface for desktop users")
    print()
    
    print("üìü Terminal Interface:")
    print("  ‚Ä¢ For terminal/command line enthusiasts")
    print("  ‚Ä¢ Rich text interface with colors")
    print("  ‚Ä¢ Keyboard-driven navigation")
    print("  ‚Ä¢ Works over SSH")
    print()
    
    print("‚å®Ô∏è Command Line:")
    print("  ‚Ä¢ For automation and scripting")
    print("  ‚Ä¢ JSON output for integration")
    print("  ‚Ä¢ Perfect for cron jobs")
    print("  ‚Ä¢ Minimal resource usage")
    print()
    
    print("üìã Quick Start:")
    print("1. Choose an interface from the menu")
    print("2. The application will start automatically")
    print("3. Follow the on-screen instructions")
    print("4. Check 'hackathons_data.xlsx' for results")
    print()
    
    print("üîß Troubleshooting:")
    print("‚Ä¢ If an interface is missing, install dependencies")
    print("‚Ä¢ For web interface: http://localhost:5000")
    print("‚Ä¢ For CLI help: python hackathon_monitor_cli.py --help")
    print("‚Ä¢ Check config.ini for settings")
    print()
    
    input("Press Enter to continue...")

def launch_interface(interface_type, script_name):
    """Launch the selected interface"""
    script_path = Path(script_name)
    
    if not script_path.exists():
        print(f"‚ùå Error: {script_name} not found!")
        print("Make sure all files are in the same directory.")
        input("Press Enter to continue...")
        return
    
    print(f"üöÄ Starting {interface_type.title()} Interface...")
    print()
    
    try:
        if interface_type == 'web':
            print("üåê Web interface starting...")
            print("üìç URL: http://localhost:5000")
            print("üîÑ Browser will open automatically")
            print("‚èπÔ∏è Press Ctrl+C to stop")
            print()
        elif interface_type == 'cli':
            print("‚å®Ô∏è Command Line Interface")
            print("Use --help for available commands")
            print()
        
        # Launch the interface
        subprocess.run([sys.executable, script_name])
        
    except KeyboardInterrupt:
        print("\nüëã Interface stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting interface: {e}")
        input("Press Enter to continue...")

def main():
    """Main launcher function"""
    while True:
        try:
            # Clear screen
            import os
            os.system('cls' if os.name == 'nt' else 'clear')
            
            # Show menu
            options = show_interface_menu()
            
            # Get user choice
            try:
                choice = input("Enter your choice: ").strip()
                choice_num = int(choice) - 1
            except ValueError:
                print("‚ùå Invalid choice. Please enter a number.")
                input("Press Enter to continue...")
                continue
            
            # Handle choice
            if 0 <= choice_num < len(options):
                interface_type, script_name = options[choice_num]
                launch_interface(interface_type, script_name)
            
            elif choice_num == len(options):
                install_dependencies()
            
            elif choice_num == len(options) + 1:
                show_help()
            
            elif choice_num == len(options) + 2:
                print("üëã Goodbye!")
                break
            
            else:
                print("‚ùå Invalid choice. Please try again.")
                input("Press Enter to continue...")
        
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
            input("Press Enter to continue...")

if __name__ == "__main__":
    main()
